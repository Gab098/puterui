<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Puter Pro Coding Assistant</title>
    <script src="https://js.puter.com/v2/"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-cpp.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #111827;
            color: #f3f4f6;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .header {
            background: #1f2937;
            border-bottom: 1px solid #374151;
            padding: 1rem;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
        }

        .header-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            background: #374151;
            border: 1px solid #4b5563;
            color: #f3f4f6;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .btn:hover:not(:disabled) {
            background: #4b5563;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .tabs {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
            max-width: 1400px;
            margin-left: auto;
            margin-right: auto;
        }

        .tab {
            padding: 0.5rem 1rem;
            background: #374151;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .tab.active {
            background: #3b82f6;
        }

        .content {
            flex: 1;
            overflow: hidden;
        }

        .chat-container {
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        .message {
            display: flex;
            margin-bottom: 1rem;
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-content {
            max-width: 70%;
            padding: 1rem;
            border-radius: 12px;
        }

        .message.user .message-content {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        .message.assistant .message-content {
            background: #1f2937;
            border: 1px solid #374151;
        }

        .message.assistant.error .message-content {
            background: #7f1d1d;
            border: 1px solid #991b1b;
        }

        .code-block {
            margin: 1rem 0;
        }

        .code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #000;
            padding: 0.5rem 1rem;
            border-radius: 8px 8px 0 0;
            border: 1px solid #374151;
        }

        .code-actions {
            display: flex;
            gap: 0.5rem;
        }

        .code-actions button {
            background: transparent;
            border: 1px solid #4b5563;
            color: #f3f4f6;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }

        .code-actions button:hover {
            background: #374151;
        }

        pre[class*="language-"] {
            margin: 0 !important;
            border-radius: 0 0 8px 8px;
            max-height: 500px;
        }

        .input-area {
            border-top: 1px solid #374151;
            background: #1f2937;
            padding: 1rem;
        }

        .input-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            gap: 0.5rem;
        }

        .input-field {
            flex: 1;
            background: #111827;
            border: 1px solid #374151;
            color: #f3f4f6;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 14px;
            font-family: inherit;
        }

        .input-field:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border: none;
        }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #2563eb, #7c3aed);
        }

        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: #9ca3af;
        }

        .empty-icon {
            font-size: 64px;
            margin-bottom: 1rem;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            max-width: 1000px;
            margin: 2rem auto;
        }

        .quick-action {
            background: #1f2937;
            border: 1px solid #374151;
            padding: 1.5rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s;
            text-align: left;
        }

        .quick-action:hover {
            border-color: #3b82f6;
            transform: translateY(-5px);
        }

        .editor-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            padding: 1rem;
            height: 100%;
            max-width: 1400px;
            margin: 0 auto;
        }

        .editor-panel {
            display: flex;
            flex-direction: column;
            background: #1f2937;
            border: 1px solid #374151;
            border-radius: 12px;
            overflow: hidden;
        }

        .editor-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #374151;
        }

        #codeEditor {
            flex: 1;
            background: #111827;
            color: #f3f4f6;
            padding: 1rem;
            border: none;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            resize: none;
        }

        .editor-output {
            flex: 1;
            background: #111827;
            padding: 1rem;
            overflow: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
        }

        .snippets-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .snippets-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 1rem;
        }

        .snippet-card {
            background: #1f2937;
            border: 1px solid #374151;
            border-radius: 12px;
            padding: 1rem;
            transition: all 0.3s;
        }

        .snippet-card:hover {
            border-color: #3b82f6;
            transform: translateY(-5px);
        }

        .settings-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .settings-section {
            background: #1f2937;
            border: 1px solid #374151;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        select {
            background: #111827;
            border: 1px solid #374151;
            color: #f3f4f6;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 14px;
            width: 100%;
        }

        .loading-dots {
            display: flex;
            gap: 0.5rem;
            padding: 1rem;
        }

        .loading-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            animation: bounce 1.4s infinite ease-in-out both;
        }

        .loading-dot:nth-child(1) {
            background: #3b82f6;
            animation-delay: -0.32s;
        }

        .loading-dot:nth-child(2) {
            background: #8b5cf6;
            animation-delay: -0.16s;
        }

        .loading-dot:nth-child(3) {
            background: #3b82f6;
        }

        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1); }
        }

        .toast {
            position: fixed;
            top: 2rem;
            right: 2rem;
            background: #1f2937;
            border: 1px solid #374151;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(100px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .file-badge {
            background: #374151;
            border-radius: 16px;
            padding: 0.25rem 0.75rem;
            font-size: 12px;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.25rem;
        }

        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #111827;
        }

        ::-webkit-scrollbar-thumb {
            background: #374151;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #4b5563;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">💻</div>
                    <div>
                        <h1 style="font-size: 20px; margin-bottom: 4px;">Puter Pro Coding Assistant</h1>
                        <p id="status" style="font-size: 12px; color: #9ca3af;">Connessione...</p>
                    </div>
                </div>
                <div class="header-actions">
                    <button class="btn" onclick="exportChat()" id="exportBtn">💾 Esporta</button>
                    <button class="btn" onclick="clearHistory()" id="clearBtn">🗑️ Pulisci</button>
                </div>
            </div>
            <div class="tabs">
                <div class="tab active" onclick="switchTab('chat')">💬 Chat</div>
                <div class="tab" onclick="switchTab('editor')">📝 Editor</div>
                <div class="tab" onclick="switchTab('snippets')">📚 Snippets (<span id="snippetCount">0</span>)</div>
                <div class="tab" onclick="switchTab('settings')">⚙️ Impostazioni</div>
            </div>
        </div>

        <div class="content">
            <!-- Chat Tab -->
            <div id="chatTab" class="chat-container">
                <div class="messages" id="messages"></div>
                <div class="input-area">
                    <div class="input-container">
                        <input type="file" id="fileInput" multiple style="display: none;">
                        <button class="btn" onclick="document.getElementById('fileInput').click()">📎</button>
                        <input type="text" id="userInput" class="input-field" placeholder="Chiedi aiuto, carica file, o scrivi codice...">
                        <button class="btn-primary btn" onclick="sendMessage()" id="sendBtn">🚀</button>
                    </div>
                    <div id="filePreview" style="margin-top: 0.5rem;"></div>
                </div>
            </div>

            <!-- Editor Tab -->
            <div id="editorTab" class="editor-container" style="display: none;">
                <div class="editor-panel">
                    <div class="editor-header">
                        <div style="display: flex; gap: 1rem; align-items: center;">
                            <select id="languageSelect">
                                <option value="javascript">JavaScript</option>
                                <option value="python">Python</option>
                                <option value="java">Java</option>
                                <option value="cpp">C++</option>
                                <option value="c">C</option>
                                <option value="typescript">TypeScript</option>
                                <option value="rust">Rust</option>
                                <option value="go">Go</option>
                                <option value="ruby">Ruby</option>
                                <option value="php">PHP</option>
                            </select>
                            <span style="font-size: 14px; color: #9ca3af;">
                                <span id="lineCount">0</span> linee
                            </span>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn" onclick="saveSnippet()" style="background: #059669;">💾 Salva</button>
                            <button class="btn-primary btn" onclick="executeCode()" id="execBtn">▶️ Esegui</button>
                        </div>
                    </div>
                    <textarea id="codeEditor" placeholder="// Scrivi il tuo codice qui..."></textarea>
                </div>
                <div class="editor-panel">
                    <div class="editor-header">
                        <span>Output</span>
                    </div>
                    <div class="editor-output" id="output">Premi "Esegui" per vedere l'output...</div>
                </div>
            </div>

            <!-- Snippets Tab -->
            <div id="snippetsTab" style="display: none; height: 100%; overflow-y: auto;">
                <div class="snippets-container">
                    <h2 style="margin-bottom: 1.5rem;">Snippet Salvati</h2>
                    <div class="snippets-grid" id="snippetsGrid"></div>
                </div>
            </div>

            <!-- Settings Tab -->
            <div id="settingsTab" style="display: none; height: 100%; overflow-y: auto;">
                <div class="settings-container">
                    <h2 style="margin-bottom: 2rem;">⚙️ Impostazioni</h2>
                    
                    <div class="settings-section">
                        <h3 style="margin-bottom: 1rem;">🤖 Modello AI</h3>
                        <select id="aiModelSelect">
                            <option value="claude-3-5-sonnet">Claude 3.5 Sonnet (Consigliato)</option>
                            <option value="claude-3-opus">Claude 3 Opus</option>
                            <option value="claude-3-sonnet">Claude 3 Sonnet</option>
                            <option value="gpt-4">GPT-4</option>
                        </select>
                        <p style="font-size: 14px; color: #9ca3af; margin-top: 0.5rem;">
                            Seleziona il modello AI da utilizzare per le risposte
                        </p>
                    </div>

                    <div class="settings-section">
                        <h3 style="margin-bottom: 1rem;">ℹ️ Informazioni</h3>
                        <div style="font-size: 14px; line-height: 2;">
                            <p><strong>Versione:</strong> 2.0.0</p>
                            <p><strong>Storage:</strong> Puter KV (Illimitato)</p>
                            <p><strong>Code Execution:</strong> Piston API (50+ linguaggi)</p>
                            <p><strong>AI Provider:</strong> Puter.js (Gratuito)</p>
                        </div>
                    </div>

                    <div class="settings-section" style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));">
                        <h3 style="margin-bottom: 1rem;">✨ Features Premium</h3>
                        <ul style="list-style: none; padding: 0; font-size: 14px; line-height: 2;">
                            <li>✅ Memoria persistente illimitata</li>
                            <li>✅ Upload multipli file</li>
                            <li>✅ Esecuzione codice real-time</li>
                            <li>✅ Salvataggio snippet</li>
                            <li>✅ Modelli AI multipli</li>
                            <li>✅ Editor integrato</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const DEBUG = true;
        const log = (...args) => DEBUG && console.log('[DEBUG]', ...args);

        let puterReady = false;
        let messages = [];
        let uploadedFiles = [];
        let snippets = [];
        let aiModel = 'claude-3-5-sonnet';

        // Initialize
        async function init() {
            log('Init starting...');
            try {
                if (typeof puter === 'undefined') throw new Error('Puter SDK not loaded');
                
                await puter.auth.signIn();
                puterReady = true;
                document.getElementById('status').textContent = '🟢 AI Ready • File Upload • Code Execution';
                
                await loadHistory();
                await loadSnippets();
                loadSettings();
                renderMessages();
                showToast('Sistema pronto! ✅');
                log('Init complete');
            } catch (error) {
                log('Init error:', error);
                document.getElementById('status').textContent = '🔴 Errore: ' + error.message;
                showToast('Errore di connessione!', true);
            }
        }

        // Load/Save
        async function loadHistory() {
            try {
                const data = await puter.kv.get('chat_history');
                if (data) {
                    messages = JSON.parse(data);
                    log('History loaded:', messages.length);
                }
            } catch (e) {
                log('No history');
            }
        }

        async function saveHistory() {
            try {
                await puter.kv.set('chat_history', JSON.stringify(messages));
            } catch (e) {
                log('Save error:', e);
            }
        }

        async function loadSnippets() {
            try {
                const data = await puter.kv.get('code_snippets');
                if (data) {
                    snippets = JSON.parse(data);
                    document.getElementById('snippetCount').textContent = snippets.length;
                    log('Snippets loaded:', snippets.length);
                }
            } catch (e) {
                log('No snippets');
            }
        }

        async function saveSnippetsData() {
            try {
                await puter.kv.set('code_snippets', JSON.stringify(snippets));
                document.getElementById('snippetCount').textContent = snippets.length;
            } catch (e) {
                log('Snippet save error:', e);
            }
        }

        function loadSettings() {
            const saved = localStorage.getItem('ai_model');
            if (saved) {
                aiModel = saved;
                document.getElementById('aiModelSelect').value = saved;
            }
        }

        document.getElementById('aiModelSelect').addEventListener('change', (e) => {
            aiModel = e.target.value;
            localStorage.setItem('ai_model', aiModel);
            showToast('Modello cambiato: ' + aiModel);
        });

        // File upload
        document.getElementById('fileInput').addEventListener('change', async (e) => {
            const files = Array.from(e.target.files);
            log('Files:', files.length);
            
            for (const file of files) {
                if (file.size > 5 * 1024 * 1024) {
                    showToast(`${file.name} troppo grande (max 5MB)`, true);
                    continue;
                }
                
                try {
                    const text = await file.text();
                    uploadedFiles.push({
                        name: file.name,
                        content: text,
                        size: file.size,
                        type: file.type
                    });
                } catch (err) {
                    log('File read error:', err);
                }
            }
            
            renderFilePreview();
            
            if (uploadedFiles.length > 0) {
                const fileContext = uploadedFiles.map(f => 
                    `File: ${f.name}\n\`\`\`\n${f.content}\n\`\`\``
                ).join('\n\n');
                document.getElementById('userInput').value = `Ho caricato questi file, puoi analizzarli:\n\n${fileContext}`;
            }
            
            showToast(`${files.length} file caricati! 📎`);
        });

        function renderFilePreview() {
            const preview = document.getElementById('filePreview');
            preview.innerHTML = '';
            uploadedFiles.forEach((f, idx) => {
                const badge = document.createElement('span');
                badge.className = 'file-badge';
                badge.innerHTML = `📄 ${f.name} <span onclick="removeFile(${idx})" style="cursor: pointer; margin-left: 8px;">×</span>`;
                preview.appendChild(badge);
            });
        }

        function removeFile(idx) {
            uploadedFiles.splice(idx, 1);
            renderFilePreview();
        }

        // Quick actions
        function quickAction(prompt) {
            generateCode(prompt);
        }

        async function generateCode(task) {
            setLoading(true);
            try {
                const response = await puter.ai.chat(`Generate clean, well-commented code for: ${task}. Include explanations.`, { model: aiModel });
                
                messages.push({
                    role: 'assistant',
                    content: response,
                    timestamp: new Date().toISOString()
                });
                
                await saveHistory();
                renderMessages();
            } catch (error) {
                log('Generate error:', error);
                showToast('Errore: ' + error.message, true);
            } finally {
                setLoading(false);
            }
        }

        // Send message
        async function sendMessage() {
            const input = document.getElementById('userInput');
            const text = input.value.trim();
            
            if (!text || !puterReady) return;
            
            const userMsg = {
                role: 'user',
                content: text,
                timestamp: new Date().toISOString(),
                files: uploadedFiles.length > 0 ? uploadedFiles.map(f => ({name: f.name, size: f.size})) : null
            };
            
            messages.push(userMsg);
            input.value = '';
            uploadedFiles = [];
            renderFilePreview();
            
            renderMessages();
            setLoading(true);
            
            try {
                const context = messages.slice(-10).map(m => `${m.role}: ${m.content}`).join('\n\n');
                const systemPrompt = `You are an expert coding assistant specialized in programming. You help with:
- Code debugging and optimization
- Explaining programming concepts
- Writing clean, efficient code
- Best practices and design patterns
- Algorithm explanations
- Code reviews

Be concise but thorough. Format code with proper syntax highlighting using markdown code blocks.`;

                const prompt = `${systemPrompt}\n\nConversation history:\n${context}\n\nRespond to the latest message. If code is involved, use proper markdown formatting with language tags.`;
                
                const response = await puter.ai.chat(prompt, { model: aiModel });
                
                messages.push({
                    role: 'assistant',
                    content: response,
                    timestamp: new Date().toISOString()
                });
                
                await saveHistory();
                renderMessages();
                showToast('Risposta ricevuta! ✅');
            } catch (error) {
                log('Send error:', error);
                messages.push({
                    role: 'assistant',
                    content: `❌ Errore: ${error.message}`,
                    timestamp: new Date().toISOString(),
                    error: true
                });
                renderMessages();
                showToast('Errore!', true);
            } finally {
                setLoading(false);
            }
        }

        function setLoading(loading) {
            document.getElementById('sendBtn').disabled = loading;
            document.getElementById('userInput').disabled = loading;
            
            if (loading) {
                const container = document.getElementById('messages');
                const div = document.createElement('div');
                div.id = 'loadingMsg';
                div.className = 'message assistant';
                div.innerHTML = `
                    <div class="message-content">
                        <div class="loading-dots">
                            <div class="loading-dot"></div>
                            <div class="loading-dot"></div>
                            <div class="loading-dot"></div>
                        </div>
                    </div>
                `;
                container.appendChild(div);
                container.scrollTop = container.scrollHeight;
            } else {
                document.getElementById('loadingMsg')?.remove();
            }
        }

        // Render messages
        function renderMessages() {
            const container = document.getElementById('messages');
            
            if (messages.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">✨</div>
                        <h2>AI Coding Assistant Avanzato</h2>
                        <p>Carica file, esegui codice, salva snippet e molto altro!</p>
                        
                        <div class="quick-actions">
                            <div class="quick-action" onclick="quickAction('Debug and fix issues in my code')">
                                <div style="font-size: 32px; margin-bottom: 8px;">🐛</div>
                                <h3>Debug Codice</h3>
                                <p style="font-size: 14px; color: #9ca3af; margin-top: 4px;">Trova e correggi bug</p>
                            </div>
                            <div class="quick-action" onclick="quickAction('Optimize this code for better performance')">
                                <div style="font-size: 32px; margin-bottom: 8px;">✨</div>
                                <h3>Ottimizza</h3>
                                <p style="font-size: 14px; color: #9ca3af; margin-top: 4px;">Migliora le performance</p>
                            </div>
                            <div class="quick-action" onclick="quickAction('Explain this programming concept in detail')">
                                <div style="font-size: 32px; margin-bottom: 8px;">📚</div>
                                <h3>Spiega Concetto</h3>
                                <p style="font-size: 14px; color: #9ca3af; margin-top: 4px;">Impara nuove cose</p>
                            </div>
                            <div class="quick-action" onclick="quickAction('Refactor this code following best practices')">
                                <div style="font-size: 32px; margin-bottom: 8px;">🔄</div>
                                <h3>Refactoring</h3>
                                <p style="font-size: 14px; color: #9ca3af; margin-top: 4px;">Codice più pulito</p>
                            </div>
                        </div>

                        <div style="max-width: 600px; margin: 2rem auto; background: #1f2937; border: 1px solid #374151; border-radius: 12px; padding: 1.5rem; text-align: left;">
                            <h3 style="margin-bottom: 1rem;">✨ Funzionalità Premium:</h3>
                            <ul style="list-style: none; padding: 0; font-size: 14px; line-height: 2;">
                                <li>📎 Upload e analisi file di codice</li>
                                <li>▶️ Esecuzione codice in tempo reale (50+ linguaggi)</li>
                                <li>💾 Salvataggio snippet con memoria persistente</li>
                                <li>🤖 AI multipla (Claude, GPT models)</li>
                                <li>🎨 Code editor integrato</li>
                            </ul>
                        </div>
                    </div>
                `;
                document.getElementById('exportBtn').disabled = true;
                document.getElementById('clearBtn').disabled = true;
                return;
            }
            
            document.getElementById('exportBtn').disabled = false;
            document.getElementById('clearBtn').disabled = false;
            
            container.innerHTML = '';
            
            messages.forEach((msg, idx) => {
                const div = document.createElement('div');
                div.className = `message ${msg.role}${msg.error ? ' error' : ''}`;
                
                let content = escapeHtml(msg.content);
                
                // Parse code blocks
                content = content.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
                    lang = lang || 'javascript';
                    const codeId = `code-${idx}-${Math.random().toString(36).substr(2, 9)}`;
                    
                    try {
                        const highlighted = Prism.highlight(
                            code.trim(),
                            Prism.languages[lang] || Prism.languages.javascript,
                            lang
                        );
                        
                        return `
                            <div class="code-block">
                                <div class="code-header">
                                    <span style="font-size: 12px; font-family: monospace;">${lang}</span>
                                    <div class="code-actions">
                                        <button onclick="openInEditor('${codeId}', '${lang}')">📝 Editor</button>
                                        <button onclick="copyCode('${codeId}')">📋 Copia</button>
                                    </div>
                                </div>
                                <pre class="language-${lang}"><code id="${codeId}" class="language-${lang}">${highlighted}</code></pre>
                            </div>
                        `;
                    } catch (e) {
                        return `<pre><code id="${codeId}">${escapeHtml(code)}</code></pre>`;
                    }
                });
                
                // Parse inline markdown
                content = content.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
                content = content.replace(/\*(.+?)\*/g, '<em>$1</em>');
                content = content.replace(/`(.+?)`/g, '<code style="background: rgba(0,0,0,0.5); padding: 2px 6px; border-radius: 4px;">$1</code>');
                content = content.replace(/\n/g, '<br>');
                
                div.innerHTML = `
                    <div class="message-content">
                        <div style="font-size: 12px; opacity: 0.7; margin-bottom: 0.5rem;">
                            ${msg.role === 'user' ? '👤 Tu' : '🤖 Assistant'} • 
                            ${new Date(msg.timestamp).toLocaleTimeString()}
                        </div>
                        ${msg.files ? `<div style="font-size: 12px; margin-bottom: 0.5rem;">${msg.files.map(f => `📎 ${f.name}`).join(', ')}</div>` : ''}
                        <div>${content}</div>
                    </div>
                `;
                
                container.appendChild(div);
            });
            
            container.scrollTop = container.scrollHeight;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function copyCode(codeId) {
            const el = document.getElementById(codeId);
            if (!el) return;
            
            navigator.clipboard.writeText(el.textContent).then(() => {
                showToast('Codice copiato! 📋');
            });
        }

        function openInEditor(codeId, lang) {
            const el = document.getElementById(codeId);
            if (!el) return;
            
            document.getElementById('codeEditor').value = el.textContent;
            document.getElementById('languageSelect').value = lang;
            switchTab('editor');
            showToast('Aperto nell\'editor! 📝');
        }

        // Editor
        document.getElementById('codeEditor').addEventListener('input', (e) => {
            document.getElementById('lineCount').textContent = e.target.value.split('\n').length;
        });

        async function executeCode() {
            const code = document.getElementById('codeEditor').value;
            const lang = document.getElementById('languageSelect').value;
            const output = document.getElementById('output');
            const btn = document.getElementById('execBtn');
            
            if (!code.trim()) return;
            
            btn.disabled = true;
            output.textContent = 'Esecuzione...';
            
            try {
                const res = await fetch('https://emkc.org/api/v2/piston/execute', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        language: lang,
                        version: '*',
                        files: [{ name: `main.${lang}`, content: code }]
                    })
                });
                
                const data = await res.json();
                output.textContent = data.run?.output || data.run?.stderr || 'Completato';
            } catch (error) {
                output.textContent = `Errore: ${error.message}`;
            } finally {
                btn.disabled = false;
            }
        }

        async function saveSnippet() {
            const code = document.getElementById('codeEditor').value;
            const lang = document.getElementById('languageSelect').value;
            
            if (!code.trim()) return showToast('Scrivi del codice prima!', true);
            
            snippets.push({
                id: Date.now(),
                code,
                language: lang,
                timestamp: new Date().toISOString()
            });
            
            await saveSnippetsData();
            renderSnippets();
            showToast('Snippet salvato! 💾');
        }

        function renderSnippets() {
            const grid = document.getElementById('snippetsGrid');
            
            if (snippets.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">📚</div>
                        <h2>Nessuno snippet salvato</h2>
                        <p>Usa l'editor per salvare i tuoi snippet!</p>
                    </div>
                `;
                return;
            }
            
            grid.innerHTML = '';
            
            snippets.forEach(s => {
                const card = document.createElement('div');
                card.className = 'snippet-card';
                card.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <span style="background: #3b82f6; padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 12px;">
                            ${s.language}
                        </span>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn" style="padding: 0.25rem 0.5rem;" onclick="loadSnippet(${s.id})">📝</button>
                            <button class="btn" style="padding: 0.25rem 0.5rem;" onclick="deleteSnippet(${s.id})">🗑️</button>
                        </div>
                    </div>
                    <pre style="background: #111827; padding: 1rem; border-radius: 8px; overflow-x: auto; font-size: 12px; max-height: 200px;"><code>${escapeHtml(s.code.substring(0, 300))}${s.code.length > 300 ? '...' : ''}</code></pre>
                    <div style="font-size: 12px; color: #9ca3af; margin-top: 0.5rem;">
                        ${new Date(s.timestamp).toLocaleString()}
                    </div>
                `;
                grid.appendChild(card);
            });
        }

        function loadSnippet(id) {
            const s = snippets.find(x => x.id === id);
            if (s) {
                document.getElementById('codeEditor').value = s.code;
                document.getElementById('languageSelect').value = s.language;
                switchTab('editor');
                showToast('Snippet caricato! 📝');
            }
        }

        async function deleteSnippet(id) {
            if (!confirm('Eliminare questo snippet?')) return;
            snippets = snippets.filter(x => x.id !== id);
            await saveSnippetsData();
            renderSnippets();
            showToast('Snippet eliminato! 🗑️');
        }

        // Utility
        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            event.target.classList.add('active');
            
            document.getElementById('chatTab').style.display = tab === 'chat' ? 'flex' : 'none';
            document.getElementById('editorTab').style.display = tab === 'editor' ? 'grid' : 'none';
            document.getElementById('snippetsTab').style.display = tab === 'snippets' ? 'block' : 'none';
            document.getElementById('settingsTab').style.display = tab === 'settings' ? 'block' : 'none';
            
            if (tab === 'snippets') renderSnippets();
        }

        function exportChat() {
            const text = messages.map(m => 
                `[${m.role.toUpperCase()}] ${new Date(m.timestamp).toLocaleString()}\n${m.content}\n\n`
            ).join('---\n\n');
            
            const blob = new Blob([text], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `chat-${Date.now()}.txt`;
            a.click();
            URL.revokeObjectURL(url);
            showToast('Chat esportata! 💾');
        }

        async function clearHistory() {
            if (!confirm('Cancellare tutta la cronologia?')) return;
            
            messages = [];
            await puter.kv.del('chat_history');
            renderMessages();
            showToast('Cronologia cancellata! 🗑️');
        }

        function showToast(msg, error = false) {
            const toast = document.createElement('div');
            toast.className = 'toast';
            if (error) toast.style.borderColor = '#ef4444';
            toast.textContent = msg;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 3000);
        }

        // Keyboard
        document.getElementById('userInput').addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        document.getElementById('codeEditor').addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                e.preventDefault();
                const start = e.target.selectionStart;
                const end = e.target.selectionEnd;
                e.target.value = e.target.value.substring(0, start) + '  ' + e.target.value.substring(end);
                e.target.selectionStart = e.target.selectionEnd = start + 2;
            }
        });

        // Init
        window.addEventListener('load', () => {
            setTimeout(init, 500);
        });
    </script>
</body>
</html>