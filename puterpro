import React, { useState, useEffect, useRef } from 'react';
import { Send, Code, Trash2, Download, Copy, Check, Upload, FileCode, Play, Save, FolderOpen, Sparkles, BookOpen, Settings, Zap, Bug, RefreshCw, BookmarkPlus, Search, Moon, Sun, Terminal, Cpu, Database, Clock, MessageSquare, User, Bot } from 'lucide-react';

const PuterCodingAssistant = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [puterReady, setPuterReady] = useState(false);
  const [copied, setCopied] = useState(null);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [activeTab, setActiveTab] = useState('chat');
  const [codeEditor, setCodeEditor] = useState('');
  const [editorLanguage, setEditorLanguage] = useState('javascript');
  const [executing, setExecuting] = useState(false);
  const [executionResult, setExecutionResult] = useState('');
  const [savedSnippets, setSavedSnippets] = useState([]);
  const [aiModel, setAiModel] = useState('claude-3-5-sonnet');
  const [connectionStatus, setConnectionStatus] = useState('Inizializzazione...');
  const [searchQuery, setSearchQuery] = useState('');
  const [darkMode, setDarkMode] = useState(true);
  const [stats, setStats] = useState({ messages: 0, snippets: 0, filesUploaded: 0 });
  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://js.puter.com/v2/';
    script.async = true;
    script.onload = async () => {
      try {
        console.log('[INIT] Puter SDK loaded');
        await window.puter.auth.signIn();
        setPuterReady(true);
        setConnectionStatus('🟢 Connected');
        
        await loadHistory();
        await loadSnippets();
        showToast('🎉 Sistema pronto!', 'success');
      } catch (error) {
        console.error('[INIT] Error:', error);
        setConnectionStatus('🔴 Errore');
        setPuterReady(true);
        showToast('⚠️ Modalità limitata', 'warning');
      }
    };
    document.head.appendChild(script);

    return () => {
      if (document.head.contains(script)) {
        document.head.removeChild(script);
      }
    };
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    const savedModel = localStorage.getItem('ai_model');
    if (savedModel) setAiModel(savedModel);
  }, []);

  useEffect(() => {
    setStats({
      messages: messages.length,
      snippets: savedSnippets.length,
      filesUploaded: messages.filter(m => m.files).reduce((acc, m) => acc + m.files.length, 0)
    });
  }, [messages, savedSnippets]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const showToast = (message, type = 'info') => {
    const colors = {
      success: 'from-green-600 to-emerald-600',
      error: 'from-red-600 to-rose-600',
      warning: 'from-yellow-600 to-orange-600',
      info: 'from-blue-600 to-cyan-600'
    };
    
    const icons = {
      success: '✓',
      error: '✕',
      warning: '⚠',
      info: 'ℹ'
    };
    
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 bg-gradient-to-r ${colors[type]} text-white px-6 py-3 rounded-xl shadow-2xl z-50 flex items-center gap-3 animate-in slide-in-from-right`;
    toast.innerHTML = `<span class="text-xl">${icons[type]}</span><span>${message}</span>`;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  };

  const loadHistory = async () => {
    try {
      const history = await window.puter.kv.get('chat_history');
      if (history) {
        const parsed = JSON.parse(history);
        setMessages(parsed);
        console.log('[STORAGE] Loaded', parsed.length, 'messages');
      }
    } catch (error) {
      console.log('[STORAGE] No history');
    }
  };

  const saveHistory = async (msgs) => {
    try {
      await window.puter.kv.set('chat_history', JSON.stringify(msgs));
    } catch (error) {
      console.error('[STORAGE] Save error:', error);
    }
  };

  const loadSnippets = async () => {
    try {
      const snippets = await window.puter.kv.get('code_snippets');
      if (snippets) {
        const parsed = JSON.parse(snippets);
        setSavedSnippets(parsed);
        console.log('[STORAGE] Loaded', parsed.length, 'snippets');
      }
    } catch (error) {
      console.log('[STORAGE] No snippets');
    }
  };

  const saveSnippets = async (snippets) => {
    try {
      await window.puter.kv.set('code_snippets', JSON.stringify(snippets));
    } catch (error) {
      console.error('[STORAGE] Snippet save error:', error);
    }
  };

  const handleFileUpload = async (e) => {
    const files = Array.from(e.target.files);
    const newFiles = [];

    for (const file of files) {
      if (file.size > 5 * 1024 * 1024) {
        showToast(`❌ ${file.name} troppo grande (max 5MB)`, 'error');
        continue;
      }

      try {
        const text = await file.text();
        newFiles.push({
          name: file.name,
          content: text,
          size: file.size,
          type: file.type
        });
      } catch (error) {
        showToast(`❌ Errore lettura ${file.name}`, 'error');
      }
    }

    setUploadedFiles([...uploadedFiles, ...newFiles]);
    
    if (newFiles.length > 0) {
      const fileContext = newFiles.map(f => 
        `File: ${f.name}\n\`\`\`\n${f.content.substring(0, 3000)}\n\`\`\``
      ).join('\n\n');
      
      setInput(`📎 Ho caricato ${newFiles.length} file:\n\n${fileContext}`);
      showToast(`✓ ${newFiles.length} file caricati!`, 'success');
    }
  };

  const executeCode = async () => {
    if (!codeEditor.trim()) {
      showToast('⚠️ Scrivi del codice!', 'warning');
      return;
    }

    setExecuting(true);
    setExecutionResult('⏳ Esecuzione in corso...');

    try {
      const response = await fetch('https://emkc.org/api/v2/piston/execute', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          language: editorLanguage,
          version: '*',
          files: [{ name: `main.${editorLanguage}`, content: codeEditor }]
        })
      });

      const data = await response.json();
      
      if (data.run) {
        const output = data.run.output || data.run.stderr || '✓ Completato';
        setExecutionResult(`✓ Eseguito\n\n${output}`);
        showToast('✓ Codice eseguito!', 'success');
      } else {
        throw new Error('Nessun output');
      }
    } catch (error) {
      setExecutionResult(`❌ Errore: ${error.message}`);
      showToast('❌ Errore esecuzione', 'error');
    } finally {
      setExecuting(false);
    }
  };

  const saveCodeSnippet = async () => {
    if (!codeEditor.trim()) {
      showToast('⚠️ Scrivi del codice!', 'warning');
      return;
    }

    const snippet = {
      id: Date.now(),
      code: codeEditor,
      language: editorLanguage,
      timestamp: new Date().toISOString(),
      lines: codeEditor.split('\n').length
    };

    const newSnippets = [...savedSnippets, snippet];
    setSavedSnippets(newSnippets);
    await saveSnippets(newSnippets);
    
    showToast('✓ Snippet salvato!', 'success');
  };

  const loadSnippet = (snippet) => {
    setCodeEditor(snippet.code);
    setEditorLanguage(snippet.language);
    setActiveTab('editor');
    showToast('✓ Snippet caricato!', 'success');
  };

  const deleteSnippet = async (id) => {
    const newSnippets = savedSnippets.filter(s => s.id !== id);
    setSavedSnippets(newSnippets);
    await saveSnippets(newSnippets);
    showToast('✓ Snippet eliminato!', 'success');
  };

  const sendMessage = async () => {
    if (!input.trim() || loading) return;
    if (!puterReady) {
      showToast('❌ Sistema non pronto!', 'error');
      return;
    }

    let fullContent = input;
    if (uploadedFiles.length > 0) {
      const fileContext = uploadedFiles.map(f => 
        `\n\nFile: ${f.name}\n\`\`\`\n${f.content.substring(0, 5000)}\n\`\`\``
      ).join('');
      fullContent = input + fileContext;
    }

    const userMessage = {
      role: 'user',
      content: input,
      timestamp: new Date().toISOString(),
      files: uploadedFiles.length > 0 ? uploadedFiles.map(f => ({name: f.name, size: f.size})) : null
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInput('');
    setUploadedFiles([]);
    setLoading(true);

    try {
      const response = await window.puter.ai.chat(fullContent, { model: aiModel });
      
      const assistantMessage = {
        role: 'assistant',
        content: response,
        timestamp: new Date().toISOString()
      };

      const updatedMessages = [...newMessages, assistantMessage];
      setMessages(updatedMessages);
      await saveHistory(updatedMessages);
      
      showToast('✓ Risposta ricevuta!', 'success');
    } catch (error) {
      const errorMessage = {
        role: 'assistant',
        content: '❌ Si è verificato un errore. Riprova.',
        timestamp: new Date().toISOString(),
        error: true
      };
      const updatedMessages = [...newMessages, errorMessage];
      setMessages(updatedMessages);
      showToast('❌ Errore: ' + error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  const generateCode = async (task) => {
    setLoading(true);
    try {
      const prompt = `Generate clean, well-commented code for: ${task}. Include explanations.`;
      const response = await window.puter.ai.chat(prompt, { model: aiModel });
      
      const assistantMessage = {
        role: 'assistant',
        content: response,
        timestamp: new Date().toISOString()
      };

      const updatedMessages = [...messages, assistantMessage];
      setMessages(updatedMessages);
      await saveHistory(updatedMessages);
      showToast('✓ Codice generato!', 'success');
    } catch (error) {
      showToast('❌ Errore generazione', 'error');
    } finally {
      setLoading(false);
    }
  };

  const clearHistory = async () => {
    setMessages([]);
    try {
      await window.puter.kv.del('chat_history');
      showToast('✓ Cronologia cancellata!', 'success');
    } catch (error) {
      console.error('[STORAGE] Clear error:', error);
    }
  };

  const exportChat = () => {
    const text = messages.map(m => 
      `[${m.role.toUpperCase()}] ${new Date(m.timestamp).toLocaleString()}\n${m.content}\n\n`
    ).join('---\n\n');
    
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `chat-export-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    showToast('✓ Chat esportata!', 'success');
  };

  const copyCode = (content, index) => {
    navigator.clipboard.writeText(content);
    setCopied(index);
    setTimeout(() => setCopied(null), 2000);
    showToast('✓ Copiato!', 'success');
  };

  const formatMessage = (content) => {
    const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
    const parts = [];
    let lastIndex = 0;
    let match;

    while ((match = codeBlockRegex.exec(content)) !== null) {
      if (match.index > lastIndex) {
        parts.push({
          type: 'text',
          content: content.substring(lastIndex, match.index)
        });
      }
      
      parts.push({
        type: 'code',
        language: match[1] || 'text',
        content: match[2].trim()
      });
      
      lastIndex = match.index + match[0].length;
    }

    if (lastIndex < content.length) {
      parts.push({
        type: 'text',
        content: content.substring(lastIndex)
      });
    }

    return parts.length > 0 ? parts : [{ type: 'text', content }];
  };

  const getLanguageColor = (lang) => {
    const colors = {
      javascript: 'from-yellow-600 to-orange-600',
      python: 'from-blue-600 to-cyan-600',
      java: 'from-red-600 to-orange-600',
      cpp: 'from-blue-600 to-purple-600',
      typescript: 'from-blue-600 to-teal-600',
      rust: 'from-orange-600 to-red-600',
      go: 'from-cyan-600 to-blue-600'
    };
    return colors[lang] || 'from-gray-600 to-gray-700';
  };

  const quickActions = [
    { icon: <Bug size={32} />, text: 'Debug', desc: 'Trova e correggi bug', action: 'Debug and fix all issues in my code', color: 'from-red-500 to-rose-600' },
    { icon: <Zap size={32} />, text: 'Ottimizza', desc: 'Migliora performance', action: 'Optimize this code for better performance', color: 'from-yellow-500 to-orange-600' },
    { icon: <BookOpen size={32} />, text: 'Spiega', desc: 'Impara concetti', action: 'Explain this programming concept in detail', color: 'from-blue-500 to-cyan-600' },
    { icon: <RefreshCw size={32} />, text: 'Refactor', desc: 'Codice pulito', action: 'Refactor this code following best practices', color: 'from-green-500 to-emerald-600' },
  ];

  const filteredSnippets = savedSnippets.filter(s => 
    searchQuery === '' || 
    s.code.toLowerCase().includes(searchQuery.toLowerCase()) ||
    s.language.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-gray-900 via-gray-900 to-gray-800 text-gray-100">
      {/* Header */}
      <div className="bg-gradient-to-r from-gray-800 to-gray-900 border-b border-gray-700 shadow-2xl">
        <div className="p-4">
          <div className="flex items-center justify-between max-w-7xl mx-auto">
            <div className="flex items-center gap-4">
              <div className="relative">
                <div className="bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 p-3 rounded-2xl shadow-2xl">
                  <Code size={28} className="text-white" />
                </div>
                <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-gray-900"></div>
              </div>
              <div>
                <h1 className="text-2xl font-black bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                  Puter Pro Coding Assistant
                </h1>
                <div className="flex items-center gap-3 mt-1">
                  <span className="text-xs text-gray-400 flex items-center gap-1">
                    <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                    {connectionStatus}
                  </span>
                  <span className="text-xs text-gray-500">•</span>
                  <span className="text-xs text-gray-400">{aiModel}</span>
                </div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <div className="hidden md:flex items-center gap-4 mr-4 px-4 py-2 bg-gray-900 rounded-xl border border-gray-700">
                <div className="flex items-center gap-2">
                  <MessageSquare size={14} className="text-blue-400" />
                  <span className="text-xs text-gray-400">{stats.messages}</span>
                </div>
                <div className="flex items-center gap-2">
                  <BookmarkPlus size={14} className="text-purple-400" />
                  <span className="text-xs text-gray-400">{stats.snippets}</span>
                </div>
              </div>
              <button
                onClick={exportChat}
                disabled={messages.length === 0}
                className="p-2 hover:bg-gray-700 rounded-lg transition-colors disabled:opacity-50"
                title="Esporta"
              >
                <Download size={20} />
              </button>
              <button
                onClick={clearHistory}
                disabled={messages.length === 0}
                className="p-2 hover:bg-gray-700 rounded-lg transition-colors disabled:opacity-50"
                title="Cancella"
              >
                <Trash2 size={20} />
              </button>
            </div>
          </div>

          {/* Tabs */}
          <div className="flex gap-2 mt-4 max-w-7xl mx-auto flex-wrap">
            {[
              { id: 'chat', icon: MessageSquare, label: 'Chat', badge: messages.length },
              { id: 'editor', icon: Terminal, label: 'Editor', badge: null },
              { id: 'snippets', icon: BookmarkPlus, label: 'Snippets', badge: savedSnippets.length },
              { id: 'settings', icon: Settings, label: 'Settings', badge: null }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-5 py-2.5 rounded-xl transition-all font-semibold flex items-center gap-2 ${
                  activeTab === tab.id 
                    ? 'bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg' 
                    : 'bg-gray-800 hover:bg-gray-700 border border-gray-700'
                }`}
              >
                <tab.icon size={16} />
                {tab.label}
                {tab.badge !== null && tab.badge > 0 && (
                  <span className="ml-1 px-2 py-0.5 bg-white bg-opacity-20 rounded-full text-xs">
                    {tab.badge}
                  </span>
                )}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Content Area */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'chat' && (
          <div className="h-full flex flex-col">
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.length === 0 && (
                <div className="text-center text-gray-400 mt-10">
                  <div className="relative inline-block mb-6">
                    <div className="bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 w-24 h-24 rounded-3xl flex items-center justify-center shadow-2xl">
                      <Sparkles size={48} className="text-white" />
                    </div>
                  </div>
                  <h2 className="text-4xl font-black mb-3 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                    AI Coding Assistant Ultra
                  </h2>
                  <p className="mb-10 text-lg text-gray-500">Il tuo partner per coding professionale</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 max-w-6xl mx-auto mb-10">
                    {quickActions.map((action, idx) => (
                      <button
                        key={idx}
                        onClick={() => generateCode(action.action)}
                        className={`group bg-gradient-to-br ${action.color} p-6 rounded-2xl hover:shadow-2xl transition-all text-left transform hover:scale-105`}
                      >
                        <div className="mb-3 opacity-90">{action.icon}</div>
                        <p className="font-bold text-lg mb-1">{action.text}</p>
                        <p className="text-sm opacity-80">{action.desc}</p>
                      </button>
                    ))}
                  </div>

                  <div className="max-w-3xl mx-auto">
                    <div className="bg-gradient-to-br from-gray-800 to-gray-900 p-8 rounded-2xl border border-gray-700 shadow-2xl">
                      <div className="flex items-center gap-3 mb-6">
                        <Sparkles size={24} className="text-yellow-400" />
                        <h3 className="font-black text-2xl">Features Premium</h3>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-300">
                        {[
                          { icon: <Upload size={16} />, text: 'Upload file illimitati' },
                          { icon: <Play size={16} />, text: 'Esecuzione real-time' },
                          { icon: <Database size={16} />, text: 'Memoria persistente' },
                          { icon: <Cpu size={16} />, text: 'AI multipla' },
                          { icon: <Terminal size={16} />, text: 'Code editor PRO' },
                          { icon: <Bug size={16} />, text: 'Debug assistito' }
                        ].map((feature, idx) => (
                          <div key={idx} className="flex items-center gap-3 bg-gray-900 bg-opacity-50 p-3 rounded-xl">
                            <div className="text-blue-400">{feature.icon}</div>
                            <span>{feature.text}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {messages.map((message, idx) => (
                <div
                  key={idx}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex gap-3 max-w-4xl ${message.role === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                    <div className={`flex-shrink-0 w-10 h-10 rounded-xl flex items-center justify-center shadow-lg ${
                      message.role === 'user' 
                        ? 'bg-gradient-to-br from-blue-600 to-purple-600' 
                        : 'bg-gradient-to-br from-gray-700 to-gray-800'
                    }`}>
                      {message.role === 'user' ? <User size={20} /> : <Bot size={20} />}
                    </div>
                    
                    <div
                      className={`rounded-2xl p-5 shadow-xl ${
                        message.role === 'user'
                          ? 'bg-gradient-to-br from-blue-600 to-blue-700 text-white'
                          : message.error
                          ? 'bg-gradient-to-br from-red-900 to-red-800 border border-red-700'
                          : 'bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700'
                      }`}
                    >
                      <div className="flex items-center gap-3 mb-3 pb-3 border-b border-white border-opacity-10">
                        <span className="font-bold text-sm">
                          {message.role === 'user' ? 'Tu' : 'Assistant'}
                        </span>
                        <span className="text-xs opacity-70 flex items-center gap-1">
                          <Clock size={12} />
                          {new Date(message.timestamp).toLocaleTimeString()}
                        </span>
                      </div>
                      
                      {message.files && (
                        <div className="mb-4 space-y-2">
                          {message.files.map((file, fidx) => (
                            <div key={fidx} className="bg-black bg-opacity-20 rounded-lg px-3 py-2 flex items-center gap-2 text-xs">
                              <FileCode size={14} />
                              <span>{file.name}</span>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      <div className="space-y-4">
                        {formatMessage(message.content).map((part, partIdx) => {
                          if (part.type === 'code') {
                            return (
                              <div key={partIdx} className="relative">
                                <div className={`flex items-center justify-between bg-gradient-to-r ${getLanguageColor(part.language)} px-4 py-2 rounded-t-xl`}>
                                  <span className="text-xs font-bold uppercase">
                                    {part.language}
                                  </span>
                                  <div className="flex gap-2">
                                    <button
                                      onClick={() => {
                                        setCodeEditor(part.content);
                                        setEditorLanguage(part.language);
                                        setActiveTab('editor');
                                      }}
                                      className="p-1.5 hover:bg-white hover:bg-opacity-20 rounded-lg transition-all"
                                    >
                                      <Terminal size={14} />
                                    </button>
                                    <button
                                      onClick={() => copyCode(part.content, `${idx}-${partIdx}`)}
                                      className="p-1.5 hover:bg-white hover:bg-opacity-20 rounded-lg transition-all"
                                    >
                                      {copied === `${idx}-${partIdx}` ? (
                                        <Check size={14} />
                                      ) : (
                                        <Copy size={14} />
                                      )}
                                    </button>
                                  </div>
                                </div>
                                <pre className="bg-gray-950 p-4 rounded-b-xl overflow-x-auto border-2 border-t-0 border-gray-800">
                                  <code className="text-sm font-mono text-gray-300">{part.content}</code>
                                </pre>
                              </div>
                            );
                          }
                          return (
                            <p key={partIdx} className="whitespace-pre-wrap leading-relaxed text-sm">
                              {part.content}
                            </p>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                </div>
              ))}

              {loading && (
                <div className="flex justify-start">
                  <div className="flex gap-3">
                    <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-gray-700 to-gray-800 flex items-center justify-center shadow-lg">
                      <Bot size={20} />
                    </div>
                    <div className="bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700 rounded-2xl p-5 shadow-xl">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce"></div>
                        <div className="w-3 h-3 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-3 h-3 bg-pink-500 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="border-t border-gray-700 bg-gradient-to-r from-gray-800 to-gray-900 p-4 shadow-2xl">
              <div className="max-w-5xl mx-auto">
                {uploadedFiles.length > 0 && (
                  <div className="mb-3 flex flex-wrap gap-2">
                    {uploadedFiles.map((file, idx) => (
                      <div key={idx} className="bg-gradient-to-r from-blue-600 to-purple-600 px-4 py-2 rounded-xl text-sm flex items-center gap-2 shadow-lg">
                        <FileCode size={14} />
                        <span>{file.name}</span>
                        <button
                          onClick={() => setUploadedFiles(uploadedFiles.filter((_, i) => i !== idx))}
                          className="hover:bg-white hover:bg-opacity-20 rounded-full p-1"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                <div className="flex gap-2">
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileUpload}
                    multiple
                    className="hidden"
                    accept=".js,.jsx,.ts,.tsx,.py,.java,.cpp,.c,.html,.css,.json,.xml,.md,.txt"
                  />
                  <button
                    onClick={() => fileInputRef.current?.click()}
                    className="bg-gradient-to-br from-gray-700 to-gray-800 hover:from-gray-600 hover:to-gray-700 px-4 py-3 rounded-xl transition-all shadow-lg"
                  >
                    <Upload size={20} />
                  </button>
                  <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendMessage()}
                    placeholder="💬 Chiedi aiuto, carica file, o scrivi codice..."
                    disabled={!puterReady || loading}
                    className="flex-1 bg-gray-900 border-2 border-gray-700 rounded-xl px-5 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                  />
                  <button
                    onClick={sendMessage}
                    disabled={!puterReady || loading || !input.trim()}
                    className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-700 disabled:to-gray-800 disabled:opacity-50 px-8 py-3 rounded-xl transition-all flex items-center gap-2 shadow-lg font-bold"
                  >
                    <Send size={20} />
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'editor' && (
          <div className="h-full flex flex-col p-4">
            <div className="max-w-7xl mx-auto w-full h-full flex flex-col">
              <div className="flex items-center justify-between mb-4 bg-gradient-to-r from-gray-800 to-gray-900 p-4 rounded-xl border border-gray-700">
                <div className="flex items-center gap-4">
                  <select
                    value={editorLanguage}
                    onChange={(e) => setEditorLanguage(e.target.value)}
                    className={`bg-gradient-to-r ${getLanguageColor(editorLanguage)} border-2 border-white border-opacity-20 rounded-xl px-4 py-2 font-bold`}
                  >
                    <option value="javascript">JavaScript</option>
                    <option value="python">Python</option>
                    <option value="java">Java</option>
                    <option value="cpp">C++</option>
                    <option value="c">C</option>
                    <option value="typescript">TypeScript</option>
                    <option value="rust">Rust</option>
                    <option value="go">Go</option>
                  </select>
                  <div className="text-sm text-gray-400">
                    {codeEditor.split('\n').length} linee
                  </div>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={saveCodeSnippet}
                    disabled={!codeEditor.trim()}
                    className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 disabled:opacity-50 px-5 py-2.5 rounded-xl flex items-center gap-2 font-bold"
                  >
                    <Save size={16} />
                    Salva
                  </button>
                  <button
                    onClick={executeCode}
                    disabled={!codeEditor.trim() || executing}
                    className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 px-5 py-2.5 rounded-xl flex items-center gap-2 font-bold"
                  >
                    <Play size={16} />
                    {executing ? 'Esecuzione...' : 'Esegui'}
                  </button>
                </div>
              </div>

              <div className="flex-1 grid grid-cols-1 lg:grid-cols-2 gap-4 min-h-0">
                <div className="flex flex-col rounded-xl overflow-hidden shadow-2xl border-2 border-gray-700">
                  <div className="bg-gradient-to-r from-gray-800 to-gray-900 px-4 py-3 border-b border-gray-700">
                    <span className="text-sm font-bold">Editor</span>
                  </div>
                  <textarea
                    value={codeEditor}
                    onChange={(e) => setCodeEditor(e.target.value)}
                    placeholder="// Scrivi il tuo codice qui..."
                    className="flex-1 bg-gray-950 text-gray-100 p-5 font-mono text-sm focus:outline-none resize-none"
                  />
                </div>

                <div className="flex flex-col rounded-xl overflow-hidden shadow-2xl border-2 border-gray-700">
                  <div className="bg-gradient-to-r from-gray-800 to-gray-900 px-4 py-3 border-b border-gray-700">
                    <span className="text-sm font-bold">Output</span>
                  </div>
                  <pre className="flex-1 bg-gray-950 text-gray-300 p-5 font-mono text-sm overflow-auto">
                    {executionResult || '⚡ Premi "Esegui" per vedere l\'output...'}
                  </pre>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'snippets' && (
          <div className="h-full overflow-y-auto p-4">
            <div className="max-w-7xl mx-auto">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-3xl font-black flex items-center gap-3">
                  <BookmarkPlus size={32} />
                  Snippet Salvati
                </h2>
                <div className="flex items-center gap-2 bg-gray-800 rounded-xl px-4 py-2 border border-gray-700">
                  <Search size={16} />
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Cerca..."
                    className="bg-transparent border-none outline-none text-sm w-48"
                  />
                </div>
              </div>
              
              {filteredSnippets.length === 0 ? (
                <div className="text-center text-gray-400 py-20">
                  <BookOpen size={80} className="mx-auto mb-4 opacity-50" />
                  <p className="text-2xl font-bold">
                    {searchQuery ? 'Nessun risultato' : 'Nessuno snippet'}
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                  {filteredSnippets.map((snippet) => (
                    <div key={snippet.id} className="bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700 rounded-2xl p-5 hover:border-blue-500 transition-all shadow-xl">
                      <div className="flex items-center justify-between mb-4">
                        <span className={`bg-gradient-to-r ${getLanguageColor(snippet.language)} px-3 py-1.5 rounded-xl text-sm font-bold`}>
                          {snippet.language}
                        </span>
                        <div className="flex gap-2">
                          <button
                            onClick={() => loadSnippet(snippet)}
                            className="p-2 hover:bg-gray-700 rounded-lg"
                          >
                            <FolderOpen size={16} />
                          </button>
                          <button
                            onClick={() => copyCode(snippet.code, snippet.id)}
                            className="p-2 hover:bg-gray-700 rounded-lg"
                          >
                            {copied === snippet.id ? <Check size={16} /> : <Copy size={16} />}
                          </button>
                          <button
                            onClick={() => deleteSnippet(snippet.id)}
                            className="p-2 hover:bg-red-900 rounded-lg text-red-400"
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      </div>
                      <pre className="bg-gray-950 p-4 rounded-xl overflow-x-auto max-h-48">
                        <code className="text-xs font-mono text-gray-300">
                          {snippet.code.substring(0, 400)}
                          {snippet.code.length > 400 ? '...' : ''}
                        </code>
                      </pre>
                      <div className="mt-3 text-xs text-gray-400">
                        {new Date(snippet.timestamp).toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="h-full overflow-y-auto p-4">
            <div className="max-w-3xl mx-auto">
              <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
                <Settings size={28} />
                Impostazioni
              </h2>
              
              <div className="space-y-6">
                <div className="bg-gray-800 border border-gray-700 rounded-xl p-6">
                  <h3 className="text-lg font-semibold mb-4">🤖 Modello AI</h3>
                  <select
                    value={aiModel}
                    onChange={(e) => {
                      setAiModel(e.target.value);
                      localStorage.setItem('ai_model', e.target.value);
                      showToast('Modello cambiato!', 'success');
                    }}
                    className="w-full bg-gray-900 border border-gray-700 rounded-lg px-4 py-3"
                  >
                    <option value="claude-3-5-sonnet">Claude 3.5 Sonnet</option>
                    <option value="claude-3-opus">Claude 3 Opus</option>
                    <option value="gpt-4">GPT-4</option>
                  </select>
                </div>

                <div className="bg-gray-800 border border-gray-700 rounded-xl p-6">
                  <h3 className="text-lg font-semibold mb-4">ℹ️ Info</h3>
                  <div className="space-y-2 text-sm">
                    <p><strong>Versione:</strong> 2.0 Ultra</p>
                    <p><strong>Storage:</strong> Puter KV</p>
                    <p><strong>Execution:</strong> Piston API</p>
                  </div>
                </div>

                <div className="bg-gradient-to-br from-blue-900 to-purple-900 border border-blue-700 rounded-xl p-6">
                  <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                    <Sparkles size={20} />
                    Features Premium
                  </h3>
                  <ul className="space-y-2 text-sm">
                    <li>✅ Memoria persistente</li>
                    <li>✅ Upload file multipli</li>
                    <li>✅ Esecuzione real-time</li>
                    <li>✅ AI multipla</li>
                    <li>✅ Editor PRO</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PuterCodingAssistant;